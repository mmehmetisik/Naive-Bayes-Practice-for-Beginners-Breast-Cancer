{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "01396866",
   "metadata": {
    "papermill": {
     "duration": 0.006788,
     "end_time": "2023-07-16T19:53:14.733272",
     "exception": false,
     "start_time": "2023-07-16T19:53:14.726484",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1. Import Required Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a746deb6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-16T19:53:14.749186Z",
     "iopub.status.busy": "2023-07-16T19:53:14.748504Z",
     "iopub.status.idle": "2023-07-16T19:53:16.235648Z",
     "shell.execute_reply": "2023-07-16T19:53:16.234061Z"
    },
    "executionInfo": {
     "elapsed": 10,
     "status": "ok",
     "timestamp": 1654775549679,
     "user": {
      "displayName": "Emir Kiani",
      "userId": "02161389991804253449"
     },
     "user_tz": -180
    },
    "id": "1c0d313d",
    "papermill": {
     "duration": 1.4985,
     "end_time": "2023-07-16T19:53:16.238402",
     "exception": false,
     "start_time": "2023-07-16T19:53:14.739902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n",
      "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import classification_report"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7cbcb2d",
   "metadata": {
    "papermill": {
     "duration": 0.005746,
     "end_time": "2023-07-16T19:53:16.250291",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.244545",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2. Loading the Data Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3290be66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-16T19:53:16.265016Z",
     "iopub.status.busy": "2023-07-16T19:53:16.264612Z",
     "iopub.status.idle": "2023-07-16T19:53:16.297528Z",
     "shell.execute_reply": "2023-07-16T19:53:16.295918Z"
    },
    "executionInfo": {
     "elapsed": 315,
     "status": "ok",
     "timestamp": 1654776226475,
     "user": {
      "displayName": "Emir Kiani",
      "userId": "02161389991804253449"
     },
     "user_tz": -180
    },
    "id": "25c6e37a",
    "outputId": "6994771b-fd01-44d8-a386-2e88393923e4",
    "papermill": {
     "duration": 0.044452,
     "end_time": "2023-07-16T19:53:16.301590",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.257138",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dataset = pd.read_csv(\"/kaggle/input/breast-cancer-3csv/breast-cancer (3).csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "76316f71",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-16T19:53:16.327542Z",
     "iopub.status.busy": "2023-07-16T19:53:16.326787Z",
     "iopub.status.idle": "2023-07-16T19:53:16.375601Z",
     "shell.execute_reply": "2023-07-16T19:53:16.374381Z"
    },
    "papermill": {
     "duration": 0.063899,
     "end_time": "2023-07-16T19:53:16.377735",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.313836",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>diagnosis</th>\n",
       "      <th>radius_mean</th>\n",
       "      <th>texture_mean</th>\n",
       "      <th>perimeter_mean</th>\n",
       "      <th>area_mean</th>\n",
       "      <th>smoothness_mean</th>\n",
       "      <th>compactness_mean</th>\n",
       "      <th>concavity_mean</th>\n",
       "      <th>concave points_mean</th>\n",
       "      <th>symmetry_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>radius_worst</th>\n",
       "      <th>texture_worst</th>\n",
       "      <th>perimeter_worst</th>\n",
       "      <th>area_worst</th>\n",
       "      <th>smoothness_worst</th>\n",
       "      <th>compactness_worst</th>\n",
       "      <th>concavity_worst</th>\n",
       "      <th>concave points_worst</th>\n",
       "      <th>symmetry_worst</th>\n",
       "      <th>fractal_dimension_worst</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>M</td>\n",
       "      <td>1.097064</td>\n",
       "      <td>-2.073335</td>\n",
       "      <td>1.269934</td>\n",
       "      <td>0.984375</td>\n",
       "      <td>1.568466</td>\n",
       "      <td>3.283515</td>\n",
       "      <td>2.652874</td>\n",
       "      <td>2.532475</td>\n",
       "      <td>2.217515</td>\n",
       "      <td>...</td>\n",
       "      <td>1.886690</td>\n",
       "      <td>-1.359293</td>\n",
       "      <td>2.303601</td>\n",
       "      <td>2.001237</td>\n",
       "      <td>1.307686</td>\n",
       "      <td>2.616665</td>\n",
       "      <td>2.109526</td>\n",
       "      <td>2.296076</td>\n",
       "      <td>2.750622</td>\n",
       "      <td>1.937015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>M</td>\n",
       "      <td>1.829821</td>\n",
       "      <td>-0.353632</td>\n",
       "      <td>1.685955</td>\n",
       "      <td>1.908708</td>\n",
       "      <td>-0.826962</td>\n",
       "      <td>-0.487072</td>\n",
       "      <td>-0.023846</td>\n",
       "      <td>0.548144</td>\n",
       "      <td>0.001392</td>\n",
       "      <td>...</td>\n",
       "      <td>1.805927</td>\n",
       "      <td>-0.369203</td>\n",
       "      <td>1.535126</td>\n",
       "      <td>1.890489</td>\n",
       "      <td>-0.375612</td>\n",
       "      <td>-0.430444</td>\n",
       "      <td>-0.146749</td>\n",
       "      <td>1.087084</td>\n",
       "      <td>-0.243890</td>\n",
       "      <td>0.281190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>M</td>\n",
       "      <td>1.579888</td>\n",
       "      <td>0.456187</td>\n",
       "      <td>1.566503</td>\n",
       "      <td>1.558884</td>\n",
       "      <td>0.942210</td>\n",
       "      <td>1.052926</td>\n",
       "      <td>1.363478</td>\n",
       "      <td>2.037231</td>\n",
       "      <td>0.939685</td>\n",
       "      <td>...</td>\n",
       "      <td>1.511870</td>\n",
       "      <td>-0.023974</td>\n",
       "      <td>1.347475</td>\n",
       "      <td>1.456285</td>\n",
       "      <td>0.527407</td>\n",
       "      <td>1.082932</td>\n",
       "      <td>0.854974</td>\n",
       "      <td>1.955000</td>\n",
       "      <td>1.152255</td>\n",
       "      <td>0.201391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>M</td>\n",
       "      <td>-0.768909</td>\n",
       "      <td>0.253732</td>\n",
       "      <td>-0.592687</td>\n",
       "      <td>-0.764464</td>\n",
       "      <td>3.283553</td>\n",
       "      <td>3.402909</td>\n",
       "      <td>1.915897</td>\n",
       "      <td>1.451707</td>\n",
       "      <td>2.867383</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.281464</td>\n",
       "      <td>0.133984</td>\n",
       "      <td>-0.249939</td>\n",
       "      <td>-0.550021</td>\n",
       "      <td>3.394275</td>\n",
       "      <td>3.893397</td>\n",
       "      <td>1.989588</td>\n",
       "      <td>2.175786</td>\n",
       "      <td>6.046041</td>\n",
       "      <td>4.935010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>M</td>\n",
       "      <td>1.750297</td>\n",
       "      <td>-1.151816</td>\n",
       "      <td>1.776573</td>\n",
       "      <td>1.826229</td>\n",
       "      <td>0.280372</td>\n",
       "      <td>0.539340</td>\n",
       "      <td>1.371011</td>\n",
       "      <td>1.428493</td>\n",
       "      <td>-0.009560</td>\n",
       "      <td>...</td>\n",
       "      <td>1.298575</td>\n",
       "      <td>-1.466770</td>\n",
       "      <td>1.338539</td>\n",
       "      <td>1.220724</td>\n",
       "      <td>0.220556</td>\n",
       "      <td>-0.313395</td>\n",
       "      <td>0.613179</td>\n",
       "      <td>0.729259</td>\n",
       "      <td>-0.868353</td>\n",
       "      <td>-0.397100</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",
       "0         M     1.097064     -2.073335        1.269934   0.984375   \n",
       "1         M     1.829821     -0.353632        1.685955   1.908708   \n",
       "2         M     1.579888      0.456187        1.566503   1.558884   \n",
       "3         M    -0.768909      0.253732       -0.592687  -0.764464   \n",
       "4         M     1.750297     -1.151816        1.776573   1.826229   \n",
       "\n",
       "   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",
       "0         1.568466          3.283515        2.652874             2.532475   \n",
       "1        -0.826962         -0.487072       -0.023846             0.548144   \n",
       "2         0.942210          1.052926        1.363478             2.037231   \n",
       "3         3.283553          3.402909        1.915897             1.451707   \n",
       "4         0.280372          0.539340        1.371011             1.428493   \n",
       "\n",
       "   symmetry_mean  ...  radius_worst  texture_worst  perimeter_worst  \\\n",
       "0       2.217515  ...      1.886690      -1.359293         2.303601   \n",
       "1       0.001392  ...      1.805927      -0.369203         1.535126   \n",
       "2       0.939685  ...      1.511870      -0.023974         1.347475   \n",
       "3       2.867383  ...     -0.281464       0.133984        -0.249939   \n",
       "4      -0.009560  ...      1.298575      -1.466770         1.338539   \n",
       "\n",
       "   area_worst  smoothness_worst  compactness_worst  concavity_worst  \\\n",
       "0    2.001237          1.307686           2.616665         2.109526   \n",
       "1    1.890489         -0.375612          -0.430444        -0.146749   \n",
       "2    1.456285          0.527407           1.082932         0.854974   \n",
       "3   -0.550021          3.394275           3.893397         1.989588   \n",
       "4    1.220724          0.220556          -0.313395         0.613179   \n",
       "\n",
       "   concave points_worst  symmetry_worst  fractal_dimension_worst  \n",
       "0              2.296076        2.750622                 1.937015  \n",
       "1              1.087084       -0.243890                 0.281190  \n",
       "2              1.955000        1.152255                 0.201391  \n",
       "3              2.175786        6.046041                 4.935010  \n",
       "4              0.729259       -0.868353                -0.397100  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a84ebcd2",
   "metadata": {
    "papermill": {
     "duration": 0.006085,
     "end_time": "2023-07-16T19:53:16.390477",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.384392",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 3. Creating the LabelEncoder object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a172672c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-16T19:53:16.408065Z",
     "iopub.status.busy": "2023-07-16T19:53:16.407347Z",
     "iopub.status.idle": "2023-07-16T19:53:16.411360Z",
     "shell.execute_reply": "2023-07-16T19:53:16.410571Z"
    },
    "papermill": {
     "duration": 0.014245,
     "end_time": "2023-07-16T19:53:16.413667",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.399422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "labelencoder = LabelEncoder()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6b082c5",
   "metadata": {
    "papermill": {
     "duration": 0.006119,
     "end_time": "2023-07-16T19:53:16.426560",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.420441",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 4. Encoding the \"diagnosis\" column using LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f62af10b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-16T19:53:16.442116Z",
     "iopub.status.busy": "2023-07-16T19:53:16.441456Z",
     "iopub.status.idle": "2023-07-16T19:53:16.448275Z",
     "shell.execute_reply": "2023-07-16T19:53:16.447058Z"
    },
    "executionInfo": {
     "elapsed": 1078,
     "status": "ok",
     "timestamp": 1654776232604,
     "user": {
      "displayName": "Emir Kiani",
      "userId": "02161389991804253449"
     },
     "user_tz": -180
    },
    "id": "Ew07jezIAAvN",
    "papermill": {
     "duration": 0.017791,
     "end_time": "2023-07-16T19:53:16.450799",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.433008",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dataset[\"diagnosis\"] = labelencoder.fit_transform(dataset[\"diagnosis\"].values) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3f67bb8",
   "metadata": {
    "papermill": {
     "duration": 0.005759,
     "end_time": "2023-07-16T19:53:16.462801",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.457042",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 5. Assigning the \"diagnosis\" column as the target variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d3d9134a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-16T19:53:16.477175Z",
     "iopub.status.busy": "2023-07-16T19:53:16.476732Z",
     "iopub.status.idle": "2023-07-16T19:53:16.482916Z",
     "shell.execute_reply": "2023-07-16T19:53:16.480898Z"
    },
    "papermill": {
     "duration": 0.016447,
     "end_time": "2023-07-16T19:53:16.485535",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.469088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y = dataset[\"diagnosis\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee78d2a3",
   "metadata": {
    "papermill": {
     "duration": 0.005739,
     "end_time": "2023-07-16T19:53:16.497672",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.491933",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 6. Creating the feature matrix X by dropping the \"diagnosis\" column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0da39bf8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-16T19:53:16.513202Z",
     "iopub.status.busy": "2023-07-16T19:53:16.512854Z",
     "iopub.status.idle": "2023-07-16T19:53:16.522816Z",
     "shell.execute_reply": "2023-07-16T19:53:16.521034Z"
    },
    "executionInfo": {
     "elapsed": 309,
     "status": "ok",
     "timestamp": 1654776311810,
     "user": {
      "displayName": "Emir Kiani",
      "userId": "02161389991804253449"
     },
     "user_tz": -180
    },
    "id": "e5574c28",
    "papermill": {
     "duration": 0.02053,
     "end_time": "2023-07-16T19:53:16.525398",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.504868",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = dataset.drop(\"diagnosis\", axis =1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbdfc834",
   "metadata": {
    "papermill": {
     "duration": 0.00553,
     "end_time": "2023-07-16T19:53:16.536975",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.531445",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 7. Splitting the dataset into training and test sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0df7650f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-16T19:53:16.550901Z",
     "iopub.status.busy": "2023-07-16T19:53:16.550321Z",
     "iopub.status.idle": "2023-07-16T19:53:16.558819Z",
     "shell.execute_reply": "2023-07-16T19:53:16.557270Z"
    },
    "executionInfo": {
     "elapsed": 299,
     "status": "ok",
     "timestamp": 1654776316540,
     "user": {
      "displayName": "Emir Kiani",
      "userId": "02161389991804253449"
     },
     "user_tz": -180
    },
    "id": "ba12986b",
    "papermill": {
     "duration": 0.019302,
     "end_time": "2023-07-16T19:53:16.562154",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.542852",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04f9d87a",
   "metadata": {
    "papermill": {
     "duration": 0.00665,
     "end_time": "2023-07-16T19:53:16.575421",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.568771",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 8. Creating the Gaussian Naive Bayes model object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5725135b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-16T19:53:16.598473Z",
     "iopub.status.busy": "2023-07-16T19:53:16.597661Z",
     "iopub.status.idle": "2023-07-16T19:53:16.604488Z",
     "shell.execute_reply": "2023-07-16T19:53:16.602858Z"
    },
    "papermill": {
     "duration": 0.02282,
     "end_time": "2023-07-16T19:53:16.607582",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.584762",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = GaussianNB()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "539839b2",
   "metadata": {
    "papermill": {
     "duration": 0.006172,
     "end_time": "2023-07-16T19:53:16.620494",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.614322",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 9. Fitting the Gaussian Naive Bayes model to the training data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dee6193a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-16T19:53:16.636139Z",
     "iopub.status.busy": "2023-07-16T19:53:16.635669Z",
     "iopub.status.idle": "2023-07-16T19:53:16.657597Z",
     "shell.execute_reply": "2023-07-16T19:53:16.656063Z"
    },
    "executionInfo": {
     "elapsed": 301,
     "status": "ok",
     "timestamp": 1654776585752,
     "user": {
      "displayName": "Emir Kiani",
      "userId": "02161389991804253449"
     },
     "user_tz": -180
    },
    "id": "f8ec9bcb",
    "outputId": "80bdffe9-1189-400b-9275-02b298dafb1f",
    "papermill": {
     "duration": 0.03266,
     "end_time": "2023-07-16T19:53:16.660563",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.627903",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GaussianNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GaussianNB</label><div class=\"sk-toggleable__content\"><pre>GaussianNB()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "GaussianNB()"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9119f377",
   "metadata": {
    "papermill": {
     "duration": 0.006298,
     "end_time": "2023-07-16T19:53:16.673903",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.667605",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 10. Making predictions using the Gaussian Naive Bayes model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2e8f8756",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-16T19:53:16.691446Z",
     "iopub.status.busy": "2023-07-16T19:53:16.691006Z",
     "iopub.status.idle": "2023-07-16T19:53:16.699726Z",
     "shell.execute_reply": "2023-07-16T19:53:16.698561Z"
    },
    "papermill": {
     "duration": 0.020865,
     "end_time": "2023-07-16T19:53:16.701619",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.680754",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "predictions = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2d6ca068",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-16T19:53:16.716540Z",
     "iopub.status.busy": "2023-07-16T19:53:16.716235Z",
     "iopub.status.idle": "2023-07-16T19:53:16.721941Z",
     "shell.execute_reply": "2023-07-16T19:53:16.721056Z"
    },
    "executionInfo": {
     "elapsed": 300,
     "status": "ok",
     "timestamp": 1654776588891,
     "user": {
      "displayName": "Emir Kiani",
      "userId": "02161389991804253449"
     },
     "user_tz": -180
    },
    "id": "33e4e6cb",
    "outputId": "b2d9e0af-50d7-4552-97b5-3c7926867ba0",
    "papermill": {
     "duration": 0.015576,
     "end_time": "2023-07-16T19:53:16.723860",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.708284",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,\n",
       "       0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0,\n",
       "       1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0,\n",
       "       0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1,\n",
       "       1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1,\n",
       "       0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5052c24",
   "metadata": {
    "papermill": {
     "duration": 0.008091,
     "end_time": "2023-07-16T19:53:16.738942",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.730851",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 11. Calculating the confusion matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "28fa6472",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-16T19:53:16.754695Z",
     "iopub.status.busy": "2023-07-16T19:53:16.754304Z",
     "iopub.status.idle": "2023-07-16T19:53:16.766917Z",
     "shell.execute_reply": "2023-07-16T19:53:16.765848Z"
    },
    "executionInfo": {
     "elapsed": 306,
     "status": "ok",
     "timestamp": 1654776593491,
     "user": {
      "displayName": "Emir Kiani",
      "userId": "02161389991804253449"
     },
     "user_tz": -180
    },
    "id": "38TTU8eKANTL",
    "outputId": "073f0a5f-e4f7-4f05-8751-9ff470ccd880",
    "papermill": {
     "duration": 0.024057,
     "end_time": "2023-07-16T19:53:16.769880",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.745823",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[102,   3],\n",
       "       [ 10,  56]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y_test, predictions)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "333f782a",
   "metadata": {
    "papermill": {
     "duration": 0.006286,
     "end_time": "2023-07-16T19:53:16.783405",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.777119",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 12. Printing the classification report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b8c5f69f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-07-16T19:53:16.800561Z",
     "iopub.status.busy": "2023-07-16T19:53:16.800136Z",
     "iopub.status.idle": "2023-07-16T19:53:16.816382Z",
     "shell.execute_reply": "2023-07-16T19:53:16.814972Z"
    },
    "executionInfo": {
     "elapsed": 270,
     "status": "ok",
     "timestamp": 1654776595055,
     "user": {
      "displayName": "Emir Kiani",
      "userId": "02161389991804253449"
     },
     "user_tz": -180
    },
    "id": "33e265d5",
    "outputId": "d7235de8-b9b0-477c-9c31-2a08631a9d7c",
    "papermill": {
     "duration": 0.029099,
     "end_time": "2023-07-16T19:53:16.819557",
     "exception": false,
     "start_time": "2023-07-16T19:53:16.790458",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.97      0.94       105\n",
      "           1       0.95      0.85      0.90        66\n",
      "\n",
      "    accuracy                           0.92       171\n",
      "   macro avg       0.93      0.91      0.92       171\n",
      "weighted avg       0.93      0.92      0.92       171\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,predictions))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 13.733985,
   "end_time": "2023-07-16T19:53:18.052907",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2023-07-16T19:53:04.318922",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
